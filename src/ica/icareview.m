% function dataout = icareview(datain)
%
% This function is used to review ICA components generated by icasegdata.m
% and decide if each is artifact or brain-generated data. Each component
% can be tagged as 'Good', 'Unsure', or 'Artifact'. The field compevals is
% added to the input data structure which contains zeros for Artifacts, 1's
% for Unsure, and 2's for Good.
%
% Note that 'Unsure' doesn't have to be used at face value.  You could tag
% components containing a signal of interest (e.g. a SSR) as 'Good', and
% other brain-generated components as 'Unsure'.  Then you would have the
% option of projecting just those components with your signal of interest
% back into channel space.
%
% After making the component evaluations, analyses can be performed on the
% ICA components, or the data can be returned to channel space using the
% icatochan.m function.
%
% Navigation controls: << - Back Ten Trials
%                       < - Previous Tiral or Component
%                       > - Next Trial or Component
%                      >> - Forward Ten Trials
%
% For each component, the trial number with the highest variance is
% automatically put into the edit box. Any other trial can also be plotted
% by replacing the number in the edit box and pressing 'Enter'.
%
% Clicking 'Good', 'Unsure', or 'Artifact' will automatically advance to
% the next undecided component. Review ends when all components have been
% evaluated.
%
% Part 3 of artscreenEEG's basic data cleaning functions:
%    artscreen.m => icasegdata.m => icareview.m => icatochan.m (optional)
%
% Copyright (C) 2013 Cort Horton, <chorton@uci.edu>
% Copyright (C) 2016 Michael D. Nunez, <mdnunez1@uci.edu>
%
% This program is free software: you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation, either version 3 of the License, or
% (at your option) any later version.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program.  If not, see <http://www.gnu.org/licenses/>.


function datain = icareview(datain)

% VERSION HISTORY:
%     1.0 - created by Cort Horton  6/26/12
%     1.1 - Updates needed for backwards compatability with old naming
%       conventions.  Also now color codes the component time-series to
%       indicate the user's decisions.  4/8/13
%     1.2 - added multiple new functions, including the ability to step
%       through trials, and marks which trial is being plotted on the
%       component trial loading plot. 7/7/13
%     1.3 - updates to GUI.  Now reduces the width of the timeseries plot
%           for short trial lengths. 7/13/13
%     1.4 - Now shows the percentage of variance that each component
%            accounts for if the .cpvars field is present 7/16/13
%     1.5 - Adding the ability to view an ERP of each component instead of
%            the time series of individual trials. 7/16/13
%     1.6 - Now functions without a head model.  If none is found, it will
%            replace the topo plot with a bar graph showing channel weights
%     1.7 - No longer automatically classifies artifact, icareview now maintains 
%           component evaluation labels if they exist. 8/23/16 - Michael
%     1.8 - Added a 'Finished' button to Save & Exit. 8/29/16 - Michael
%     1.9 - No reason to keep saving headmodels. 'hm' field can now be a string
%           12/19/16 - Michael Nunez
%     1.10 - ADJUST connector 12/20/16 - Michael Nunez

%To do:
% 1) Remove Cort's automatic rejection algorithm?


if nargin < 1; help icareview; return; end;

if isfield(datain,'data') && ~isfield(datain,'ica');
    datain.ica=datain.data;
    datain=rmfield(datain,'data');
end

% Get required variables
nsamps=size(datain.ica,1);
ncomps=size(datain.ica,2);
ntrials=size(datain.ica,3);
nchans=size(datain.mix,2);
tlength=nsamps/datain.sr;
df=1/tlength;
if tlength > 3;
    widthmod=1;
    xlabs=(1:nsamps)/datain.sr;
else
    widthmod=1.25;
    xlabs=(1:nsamps)*1000/datain.sr;
end
maxfreq=size(datain.wspecs,1)/tlength;
goodtrials=find(sum(squeeze(var(datain.ica)))~=0);
ngoodtrials=length(goodtrials);
goodchans=find(datain.mix(1,:)~=0);

% If no channel positions, disable the topo
if ~isfield(datain,'hm');
    fprintf('No headmodel found. Disabling topo plots and ADJUST \n');
    nohmodel = 1;
    strhmodel = 0;
    adjustflag = 0;
elseif ischar(datain.hm)
    % If headmodel is a string, add hm
    hmname = datain.hm;
    datain = addhm(datain, hmname);
    strhmodel = 1;
    nohmodel = 0;
    adjustflag = 1;
else
    strhmodel =0;
    nohmodel = 0;
    adjustflag = 1;
end

% Create the figure, axes, and uicontrols
screensize=get(0,'ScreenSize');
if widthmod==1;
    thefig=figure('pos',[100 100 screensize(3)-200 screensize(4)-250],...
        'name','ICA Comp Review','toolbar','figure','menubar','none',...
        'DeleteFcn',@FigClosed_callback,'ResizeFcn',@SetFontsizes);
else
    thefig=figure('pos',[250 100 screensize(3)-500 screensize(4)-250],...
        'name','ICA Comp Review','toolbar','figure','menubar','none',...
        'DeleteFcn',@FigClosed_callback,'ResizeFcn',@SetFontsizes);
end

% Deletes unneeded buttons to limit confusion
set(0,'Showhidden','on');
tmp=get(thefig,'Children');
barbuttons=get(tmp,'Children');
delete(barbuttons([1 2 3 4 5 6 8 9 12 13 15 16]));

% All primary plot axes
if nohmodel
    topoaxes=axes('units','norm','pos',[widthmod*1/30 13/20 widthmod*6/30 5.9/20]);
else
    topoaxes=axes('units','norm','pos',[widthmod*.25/30 13/20 widthmod*7/30 5.9/20]);
end
specaxes=axes('units','norm','pos',[widthmod*8/30 13/20 widthmod*6/30 5.9/20]);
tloadaxes=axes('units','norm','pos',[widthmod*1/30 9/20 widthmod*13/30 2/20]);
if widthmod==1;
    trialaxes=axes('units','norm','pos',[15/30 2.2/20 14.25/30 16.7/20],...
        'NextPlot','replacechildren');
else
    trialaxes=axes('units','norm','pos',[widthmod*15/30 2.5/20 .7*14.25/30 16.4/20],...
        'NextPlot','replacechildren');
end

% Trial Navigation controls
trialnavpanel=uipanel('title','Trial Navigation','TitlePosition','centertop',...
    'units','norm','pos',[widthmod*1.5/30 6/20 widthmod*11.5/30 1.85/20]);
uc1=uicontrol('parent',trialnavpanel,'style','pushbutton','units','norm',...
    'pos',[.1/3 .15 .16 .8],'string','<<','callback',@MinusTenTrials_callback);
uc2=uicontrol('parent',trialnavpanel,'style','pushbutton','units','norm',...
    'pos',[.2267 .15 .16 .8],'string','<','callback',@PrevTrial_callback);
plottrialedit=uicontrol('parent',trialnavpanel,'style','edit','units','norm',...
    'pos',[.42 .15 .16 .8],'callback',@PlotTrial_callback);
uc3=uicontrol('parent',trialnavpanel,'style','pushbutton','units','norm',...
    'pos',[.6133 .15 .16 .8],'string','>','callback',@NextTrial_callback);
uc4=uicontrol('parent',trialnavpanel,'style','pushbutton','units','norm',...
    'pos',[.8067 .15 .16 .8],'string','>>','callback',@PlusTenTrials_callback);

% Component evaluation controls
compchoicepanel=uipanel('title','Evaluation','TitlePosition','centertop',...
    'units','norm','pos',[widthmod*1.5/30 .5/20 widthmod*4/30 5/20]);
uc5=uicontrol('parent',compchoicepanel,'style','pushbutton','units','norm','pos',[.1 .8 .8 .2],...
    'string','GOOD','backgroundcolor','g','callback',@GoodComp_callback);
uc6=uicontrol('parent',compchoicepanel,'style','pushbutton','units','norm','pos',[.1 .55 .8 .2],...
    'string','UNSURE','backgroundcolor','y','callback',@UnsureComp_callback);
uc7=uicontrol('parent',compchoicepanel,'style','pushbutton','units','norm','pos',[.1 .3 .8 .2],...
    'string','ARTIFACT','backgroundcolor','r','callback',@RejectComp_callback);

% Component navigation controls
compnavpanel=uipanel('title','Component Navigation','TitlePosition','centertop',...
    'units','norm','pos',[widthmod*6/30 .5/20 widthmod*7/30 5/20]);
if isfield(datain,'cpvars');
    comptext=uicontrol('parent',compnavpanel,'style','text','units','norm','pos',[.1 .8 .8 .15]);
    choicetext=uicontrol('parent',compnavpanel,'style','text','units','norm','pos',[.1 .4 .8 .15]);
    vartext=uicontrol('parent',compnavpanel,'style','text','units','norm','pos',[.1 .6 .8 .15]);
else
    comptext=uicontrol('parent',compnavpanel,'style','text','units','norm','pos',[.1 .7 .8 .2]);
    choicetext=uicontrol('parent',compnavpanel,'style','text','units','norm','pos',[.1 .425 .8 .2]);
end
uc8=uicontrol('parent',compnavpanel,'style','pushbutton','units','norm','pos',[.0625 .1 .25 .25],...
    'string','<','callback',@PrevComp_callback);
plotcompedit=uicontrol('parent',compnavpanel,'style','edit','units','norm','pos',[.0625*2+.25 .1 .25 .25],...
    'callback',@PlotComp_callback);
uc10=uicontrol('parent',compnavpanel,'style','pushbutton','units','norm','pos',[.0625*3+.5 .1 .25 .25],...
    'string','>','callback',@NextComp_callback);

% Time-series trial vs ERP toggle
uc11=uicontrol('style','pushbutton','units','norm','pos',[widthmod*15.5/30 .5/20 2.6/30 .9/20],...
    'string','Show Trials','callback',@TrialView_callback,'enable','off');
uc12=uicontrol('style','pushbutton','units','norm','pos',[widthmod*18.5/30 .5/20 2.5/30 .9/20],...
    'string','Show ERPs','callback',@ErpView_callback);
uc13=uicontrol('style','pushbutton','units','norm','pos',[widthmod*24/30 .5/20 1/30 .9/20],...
    'string','+','callback',@ScaleUp_callback);
uc14=uicontrol('style','pushbutton','units','norm','pos',[widthmod*25.25/30 .5/20 1/30 .9/20],...
    'string','-','callback',@ScaleDown_callback);

% Finished button (the x works in the same way)
uc15=uicontrol('style','pushbutton','units','norm','pos',[widthmod*27.25/30 .5/20 2.5/30 .9/20],...
    'string','Finished','callback',@CloseFig_callback);

% ADJUST button
uc16=uicontrol('parent',compchoicepanel,'style','pushbutton','units','norm','pos',[.1 .05 .8 .2],...
    'string','ADJUST','callback',@ADJUST_callback);

if widthmod~=1
    set(uc11,'pos',[17/30 .5/20 2.6/30 .9/20]);
    set(uc12,'pos',[20/30 .5/20 2.6/30 .9/20]);
    set(uc13,'pos',[24.35/30 .5/20 1/30 .9/20]);
    set(uc14,'pos',[25.5/30 .5/20 1/30 .9/20]);
    set(uc15,'pos',[27.25/30 .5/20 2.6/30 .9/20]);
end

SetFontsizes;

% Prepare for Component Review Loop
if ~isfield(datain,'compevals')
    datain.compevals=NaN(1,ncomps);
end
compvars=squeeze(var(datain.ica));
compvars(:,setdiff(1:ntrials,goodtrials))=NaN;

% Automatic screening for single channel comps
for j=1:ncomps;
    % look for single chan comps
    chanweights=abs(datain.mix(j,:));
    chanweights=chanweights/max(chanweights);
    maxchan=find(chanweights==1);
    if max(chanweights(setdiff(1:nchans,maxchan))) < (1/20);
        datain.compevals(j)=0;
    end
end

% Calculate starting separation between channels/comps
erpdata=mean(datain.ica(:,:,goodtrials),3);
erpsep=(1000/ncomps)*mean(var(erpdata));
chansep=5*mean(mean(compvars(:,goodtrials)));

% c=find(isnan(datain.compevals),1);
c=1; %Current component to plot
ploterp=0;
exitnow=0;
gtindex=[];

% Component review loop
%while sum(isnan(datain.compevals))>0;
while exitnow==0;
    done=0;

    if c>ncomps
        exitnow=1;
    end

    % Close the figure when evaluation is complete
    if exitnow;
        set(thefig,'DeleteFcn','');
        close(thefig);
        % If headmodel was a string, convert 'hm' field back to a string
        if strhmodel
            datain.hm = hmname;
        end
        return; 
    end;
    
    % Enable/Disable Buttons
    if c==1;
        set(uc8,'Enable','off');
    else
        set(uc8,'Enable','on');
    end
    if c==ncomps;
        set(uc10,'Enable','off');
    else
        set(uc10,'Enable','on');
    end
    if ~adjustflag
        set(uc16,'Enable','off');
    else
        set(uc16,'Enable','on');
    end
    
    % Update text
    set(plotcompedit,'string',num2str(c));
    set(comptext,'string',['Viewing Comp ' num2str(c) ' of ' num2str(ncomps)]);
    if isfield(datain,'cpvars');
        varstr=num2str(datain.cpvars(c));
        if length(varstr)>=4
            set(vartext,'string',[varstr(1:4) '% of total variance']);
        else
            set(vartext,'string',[varstr '% of total variance']);
        end
    end
    if datain.compevals(c)==2;
        choicestr='Good';
    elseif datain.compevals(c)==1;
        choicestr='Unsure';
    elseif datain.compevals(c)==0;
        choicestr='Artifact';
    else
        choicestr='Undecided';
    end
    set(choicetext,'string',['Currently: ' choicestr]);
    
    if nohmodel
        bar(topoaxes,datain.mix(c,:));
        xlim(topoaxes,[1 nchans]);
        xlabel(topoaxes,'Channel','Fontsize',round(basefontsize*.75));
        ylabel(topoaxes,'Weight','Fontsize',round(basefontsize*.75));
    else
        % Plots the channel weights topo
        topochanfont=round(basefontsize*.45);
        if nchans > 140;
            topochanfont=topochanfont-2;
        elseif nchans > 80;
            topochanfont=topochanfont-1;
        end
        hortontopo(datain.mix(c,:),datain.hm,'weights',1,'plotaxes',topoaxes,...
            'goodchans',goodchans,'chanfontsize',topochanfont);
    end
    title(topoaxes,'Channel Weights','Fontsize',basefontsize,'fontweight','bold');
    
    % Plots the weighted Power spectrum
    plot(specaxes,df:df:maxfreq,datain.wspecs(:,c));
    xlim(specaxes,[0 maxfreq]);
    xlabel(specaxes,'Frequency','Fontsize',round(basefontsize*.8));
    ylabel(specaxes,'Amplitude','Fontsize',round(basefontsize*.8));
    title(specaxes,'Weighted Spectrum','Fontsize',basefontsize,'fontweight','bold');
    set(specaxes,'YTickLabel',[]);
    
    if ploterp
        PlotErp_callback;
    else
        % Plots the trial with the largest loading
        plottrial=find(compvars(c,:)==max(compvars(c,:)),1);
        set(plottrialedit,'string',num2str(plottrial));
        PlotTrial_callback;
    end
    
    while done==0;
        pause(.05);
    end
end

drawnow;


% Nested Functions*************************************************************
    function ADJUST_callback(~,~)
        adjustflag = 0;
        set(uc16,'Enable','off');
        fprintf('ADJUST used! Please cite:\n');
        fprintf('Mognon A, Bruzzone L, Jovicich J, Buiatti M, \n');
        fprintf('ADJUST: An Automatic EEG artifact Detector based on the Joint Use of Spatial and Temporal features.\n');
        fprintf('Psychophysiology 48 (2), 229-240 (2011).\n');
        EEG = toADJUST(datain);
        art = ADJUST(EEG);
        datain.compevals(art)=0;
        done=1;
    end

    function GoodComp_callback(~,~)
        datain.compevals(c)=2;
        if c<ncomps,
            c = c+1;
        else
            c=c;
        end
        done=1;
    end

    function UnsureComp_callback(~,~)
        datain.compevals(c)=1;
        if c<ncomps,
            c = c+1;
        else
            c=c;
        end
        done=1;
    end

    function RejectComp_callback(~,~)
        datain.compevals(c)=0;
        if c<ncomps,
            c = c+1;
        else
            c=c;
        end
        done=1;
    end

    function PlotComp_callback(~,~)
        plotcomp=str2double(get(plotcompedit,'string'));
        if ismember(plotcomp,1:ncomps)
            c=plotcomp;
            done=1;
        else
            set(plotcompedit,'string',num2str(c));
        end
    end

    function PlotTrial_callback(~,~)
        lastvalidplottrial=plottrial;
        plottrial=str2double(get(plottrialedit,'string'));
        if ismember(plottrial,goodtrials);
            cla(trialaxes);
            gtindex=find(plottrial==goodtrials,1);
            if gtindex==1;
                set(uc1,'Enable','off');
                set(uc2,'Enable','off');
            else
                set(uc1,'Enable','on');
                set(uc2,'Enable','on');
            end
            if gtindex==ngoodtrials;
                set(uc3,'Enable','off');
                set(uc4,'Enable','off');
            else
                set(uc3,'Enable','on');
                set(uc4,'Enable','on');
            end
            plotdata=datain.ica(:,:,plottrial);
            plotdata=plotdata-chansep*ones(nsamps,1)*(1:ncomps);
            
            colororder=zeros(ncomps,3);
            for comp=1:ncomps
                if comp==c; colororder(comp,:)=[0 0 1];
                elseif datain.compevals(comp)==2; colororder(comp,:)=[0 .9 0];
                elseif datain.compevals(comp)==1; colororder(comp,:)=[.8 .8 0];
                elseif datain.compevals(comp)==0; colororder(comp,:)=[1 0 0];
                end
            end
            set(trialaxes,'ColorOrder',colororder);
            
            cortplotx(trialaxes,xlabs,plotdata);
            
            ylim(trialaxes,[min(min(plotdata))-chansep/4 max(max(plotdata))+chansep/4]);
            xlim(trialaxes,[0 xlabs(end)]);
            if tlength >3;
                xlabel(trialaxes,'Time (s)','Fontsize',round(basefontsize*.75));
            else
                xlabel(trialaxes,'Time(ms)','Fontsize',round(basefontsize*.75));
            end
            title(trialaxes,'Component Time Series','Fontsize',basefontsize,'fontweight','bold');
            set(trialaxes,'YTickLabel',[]);
            
            % Plots the component trial loading
            plot(tloadaxes,1:ntrials,compvars(c,:),'b.-');
            hold(tloadaxes,'on');
            plot(tloadaxes,plottrial,compvars(c,plottrial),'ro');
            hold(tloadaxes,'off');
            xlim(tloadaxes,[1 ntrials]);
            ylabel(tloadaxes,'Variance','Fontsize',round(basefontsize*.75));
            title(tloadaxes,'Trial Loadings','Fontsize',basefontsize,'fontweight','bold');
            set(tloadaxes,'YTickLabel',[]);
        else
            plottrial=lastvalidplottrial;
            set(plottrialedit,'string',num2str(lastvalidplottrial));
        end
    end

    function PlotErp_callback(~,~)
        cla(trialaxes);
        
        set(uc1,'Enable','off');
        set(uc2,'Enable','off');
        set(uc3,'Enable','off');
        set(uc4,'Enable','off');
        
        colororder=zeros(ncomps,3);
        for comp=1:ncomps
            if comp==c; colororder(comp,:)=[0 0 1];
            elseif datain.compevals(comp)==2; colororder(comp,:)=[0 .9 0];
            elseif datain.compevals(comp)==1; colororder(comp,:)=[.8 .8 0];
            elseif datain.compevals(comp)==0; colororder(comp,:)=[1 0 0];
            end
        end
        set(trialaxes,'ColorOrder',colororder);
        
        erpplotdata=erpdata-erpsep*ones(nsamps,1)*(1:ncomps);
        cortplotx(trialaxes,xlabs,erpplotdata);
        
        ylim(trialaxes,[min(min(erpplotdata))-erpsep/4 max(max(erpplotdata))+erpsep/4]);
        xlim(trialaxes,[0 xlabs(end)]);
        if tlength >3;
            xlabel(trialaxes,'Time (s)','Fontsize',round(basefontsize*.75));
        else
            xlabel(trialaxes,'Time(ms)','Fontsize',round(basefontsize*.75));
        end
        title(trialaxes,'Component ERPs','Fontsize',basefontsize,'fontweight','bold');
        set(trialaxes,'YTickLabel',[]);
        
        % Plots the component trial loading
        plot(tloadaxes,1:ntrials,compvars(c,:),'b.-');
        xlim(tloadaxes,[1 ntrials]);
        ylabel(tloadaxes,'Variance','Fontsize',round(basefontsize*.75));
        title(tloadaxes,'Trial Loadings','Fontsize',basefontsize,'fontweight','bold');
        set(tloadaxes,'YTickLabel',[]);
    end

    function PrevComp_callback(~,~)
        c=max(1,c-1);
        done=1;
    end

    function NextComp_callback(~,~)
        c=min(ncomps,c+1);
        done=1;
    end

    function MinusTenTrials_callback(~,~)
        set(plottrialedit,'string',num2str(goodtrials(max([1 gtindex-10]))));
        PlotTrial_callback;
    end

    function PrevTrial_callback(~,~)
        set(plottrialedit,'string',num2str(goodtrials(gtindex-1)));
        PlotTrial_callback;
    end

    function NextTrial_callback(~,~)
        set(plottrialedit,'string',num2str(goodtrials(gtindex+1)));
        PlotTrial_callback;
    end

    function PlusTenTrials_callback(~,~)
        set(plottrialedit,'string',num2str(goodtrials(min([ngoodtrials gtindex+10]))));
        PlotTrial_callback;
    end

    function CloseFig_callback(~,~)
        c = ncomps + 1;
        done=1;
    end % end of CloseFig_callback

    function FigClosed_callback(~,~)
        exitnow=1;
        done=1;
    end % end of FigClosed_callback

    function TrialView_callback(~,~)
        set(uc11,'enable','off');
        set(uc12,'enable','on');
        set(plottrialedit,'string',[],'enable','on');
        ploterp=0;
        done=1;
    end % end of TrialView_callback

    function ErpView_callback(~,~)
        set(uc11,'enable','on');
        set(uc12,'enable','off');
        set(plottrialedit,'string',[],'enable','off');
        ploterp=1;
        done=1;
    end % end of ErpView_callback

    function ScaleUp_callback(~,~)
        if ploterp
            erpsep=erpsep*.75;
        else
            chansep=chansep*.75;
        end
        done=1;
    end % end of ScaleUp_callback

    function ScaleDown_callback(~,~)
        if ploterp
            erpsep=erpsep/.75;
        else
            chansep=chansep/.75;
        end
        done=1;
    end % end of ScaleDown_callback

    function SetFontsizes(~,~,~)
        % Sets the font sizes for buttons and titles. Allows for better scaling
        % for various different-sized monitors
        guipos=get(thefig,'pos');
        basefontsize=round(guipos(3)/75);
        if guipos(3)/guipos(4) > 3;
            basefontsize=ceil(basefontsize*.6);
        elseif guipos(3)/guipos(4) > 2;
            basefontsize=ceil(basefontsize*.75);
        end
        
        set(trialnavpanel,'fontsize',round(basefontsize*.75),'fontweight','bold');
        set(compchoicepanel,'fontsize',round(basefontsize*.75),'fontweight','bold');
        set(compnavpanel,'fontsize',round(basefontsize*.75),'fontweight','bold');
        
        set(specaxes,'fontsize',round(basefontsize*.75));
        set(tloadaxes,'fontsize',round(basefontsize*.75));
        set(trialaxes,'fontsize',round(basefontsize*.75));
        
        set(plottrialedit,'fontsize',basefontsize);
        set(plotcompedit,'fontsize',basefontsize);
        
        if isfield(datain,'cpvars');
            set(comptext,'fontsize',round(basefontsize*.8));
            set(choicetext,'fontsize',round(basefontsize*.8));
            set(vartext,'fontsize',round(basefontsize*.8));
        else
            set(comptext,'fontsize',basefontsize);
            set(choicetext,'fontsize',basefontsize);
        end
        
        set(uc1,'fontsize',basefontsize);
        set(uc2,'fontsize',basefontsize);
        set(uc3,'fontsize',basefontsize);
        set(uc4,'fontsize',basefontsize);
        set(uc5,'fontsize',basefontsize);
        set(uc6,'fontsize',basefontsize);
        set(uc7,'fontsize',basefontsize);
        set(uc8,'fontsize',basefontsize);
        set(uc10,'fontsize',basefontsize);
        set(uc11,'fontsize',round(basefontsize*.75));
        set(uc12,'fontsize',round(basefontsize*.75));
        set(uc13,'fontsize',basefontsize);
        set(uc14,'fontsize',basefontsize);
        set(uc15,'fontsize',basefontsize);
        set(uc16,'fontsize',basefontsize);
        done=1;
    end % end of SetFontsizes

    function EEG = toADJUST(datain)
        % Converts data structure to one that can be read by the ADJUST1.1 algorithms
        EEG.data = datain.ica(1:2,1:2,:); %Note that this copy isn't really necessary as AJDUST just uses it to calculate data size
        EEG.icaact = permute(datain.ica,[2,1,3]);
        EEG.icawinv = datain.mix';
        nchans = size(datain.mix,2);
        %Note that this is a stupid way to organize electrode positions, and ADJUST just converts these back into a matrix
        %%MATLAB/EEGLAB likes EEG Cartesian coordinates in the following framework:
        %-positive X is towards the nose
        %-positive Y is towards the left ear
        %-positive Z is towards the vertex
        %%artscreen/EGI coordinates have been placed in the following framework (check this for new head models):
        %%figure; scatter3(datain.hm.Electrode.CoordOnSphere(:,1),datain.hm.Electrode.CoordOnSphere(:,2),datain.hm.Electrode.CoordOnSphere(:,3));
        %-positive X is towards the right ear
        %-positive Y is towards the nose
        %-positive Z is towards the vertex
        %The following changes reflect these differences
        for n=1:nchans,
            EEG.chanlocs(1,n) = struct('X',datain.hm.Electrode.CoordOnSphere(n,2),...
                'Y',-datain.hm.Electrode.CoordOnSphere(n,1),...
                'Z',datain.hm.Electrode.CoordOnSphere(n,3));
        end
        [temptheta, tempphi, tempradius] = cart2sph([EEG.chanlocs(1,:).X],...
            [EEG.chanlocs(1,:).Y],[EEG.chanlocs(1,:).Z]);
        for n=1:nchans,
            % EEG.chanlocs(1,n).sph_theta = (180/pi)*temptheta(n);
            % EEG.chanlocs(1,n).sph_phi = (180/pi)*tempphi(n);
            % EEG.chanlocs(1,n).sph_radius = tempradius(n);
            %The following was obtained from EEGLAB's convertlocs.m, line 152, and EEGLAB's sph2topo.m, lines 92 and 93
            EEG.chanlocs(1,n).theta = -temptheta(n)*(180/pi);
            EEG.chanlocs(1,n).radius = 0.5 - (tempphi(n)*(180/pi))/180;
        end
    end % end of toADJUST

end % end of main function
