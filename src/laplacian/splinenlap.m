%% mat = splinenlap(w,x,xs)%% SPLINENLAP creates a transform matrix for a least-squares spline% approximation of a negative surface Laplacian operation on a set of data:%% mat*data = negative surface laplacian of data on a spherical surface%%   w: weighting factor, proportional to characteristic channel distance%   x: n x 3 input channel locations%  xs: ns x 3 output channel locations%% mat: ns x n spline laplacian transform matrix%% See also: SPLINEMAKE, SPLINEINTERP%% Copyright (C) 2009 Bill Winter, <wwinter@hs.uci.edu>%% This program is free software: you can redistribute it and/or modify% it under the terms of the GNU General Public License as published by% the Free Software Foundation, either version 3 of the License, or% (at your option) any later version.%% This program is distributed in the hope that it will be useful,% but WITHOUT ANY WARRANTY; without even the implied warranty of% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the% GNU General Public License for more details.%% You should have received a copy of the GNU General Public License% along with this program.  If not, see <http://www.gnu.org/licenses/>.%% Written by Bill Winter, August 2009function varargout = splinenlap(w,x,xs,varargin)[n N] = size(x);r = repmat(sum(x.^2,2),1,n);                % radius squarede = [ones(n,1) ...                          % e, spline osculating function     x(:,1) ...     x(:,2) ...     x(:,1).^2 ...     x(:,1).*x(:,2) ...     x(:,2).^2 ...     x(:,3) ...     x(:,1).*x(:,3) ...     x(:,2).*x(:,3) ...     x(:,3).^2];k = w.^2 + abs(r + r.' - 2.*x*x');          % w.^2 plus distance.^2k = k.^2.*log(k);                           % k, spline weight matrix kif nargin < 3    xs = x;    rs = r(:,1);    ns = n;else    xs = xs(:,1:N);    rs = sum(xs.^2,2);    ns = size(rs,1);end% es, negative surface laplacian applied to spline osculating functiones = [zeros(ns,1)...      (N-1)*xs(:,1)./rs ...      (N-1)*xs(:,2)./rs ...      2*N*xs(:,1).^2./rs - 2 ...      2*N*xs(:,1).*xs(:,2)./rs ...      2*N*xs(:,2).^2./rs - 2 ...      (N-1)*xs(:,3)./rs ...      2*N*xs(:,1).*xs(:,3)./rs ...      2*N*xs(:,2).*xs(:,3)./rs ...      2*N*xs(:,3).^2./rs - 2];% ks, negative surface laplacian applied to spline weight matrixx = x.';r = repmat(r(:,1).',ns,1);rs = repmat(rs,1,n);xsx = xs*x;w = w.^2 + abs(r + rs - 2.*xsx);            % w.^2 plus distance.^2grad = w.*(2.*log(w) + 1);                  % first derivative of k parthess = 2.*log(w) + 3;                       % second derivative of k partks = 4.*hess.*(xsx.^2./rs - r) - 2.*grad.*(N-1).*xsx./rs;[varargout{1:nargout}] = splinemake(e,es,k,ks,varargin{:});